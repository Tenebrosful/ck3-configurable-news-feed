types NewsFeed {
    type newsfeed_window = window {
        name = "message_feed_widget"
        visible = "[And(And(And( Not(SinglePlayerShowingPausedSuccession), IsDefaultGUIMode), Not(IsPauseMenuShown)), Not(IsRightWindowOpen))]"
        parentanchor = bottom|right
        resizable = yes
        size = { 600 400 }
        position = { 0 -70 }
        minimumsize = { 600 0 }
        maximumsize = { 600 9999 }
        using = Background_Area_Dark
        allow_outside = yes

        state = {
            name = _mouse_hierarchy_enter
            on_start = "[PdxGuiWidget.FindChild('button_settings').TriggerAnimation('hover_enter')]"
        }

        state = {
            name = _mouse_hierarchy_leave
            on_start = "[PdxGuiWidget.FindChild('button_settings').TriggerAnimation('hover_leave')]"
        }

        state = {
            name = newsfeed_initialize
            trigger_when = "[GetScriptedGui('newsfeed_ensure_settings_initialized_gui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
            on_start = "[GetScriptedGui('newsfeed_ensure_settings_initialized_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
        }

        vbox = {
            margin_left = 20

            layoutpolicy_vertical = expanding
            layoutpolicy_horizontal = expanding

            scrollarea = {
                layoutpolicy_vertical = expanding
                layoutpolicy_horizontal = expanding
                
                scrollbarpolicy_horizontal = always_off

                scrollbar_vertical = {
                    using = Scrollbar_Vertical
                }
                
        		scrollwidget = {
                    flowcontainer = {
                        margin_top = 20
                        direction = vertical
                        layoutpolicy_horizontal = expanding
                        flowcontainer = {
                            direction = vertical
                            allow_outside = yes
                            layoutpolicy_horizontal = expanding
                            
                            datamodel = "[GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers')]"
    
                            item = {
                                newsfeed_item = {}
                            }
                        }

                        fixedgridbox = {
                            allow_outside = yes
                            maxhorizontalslots = 1
                            maxverticalslots = 1000
                            addrow = 85
                            addcolumn = 1
                            datamodel_reuse_widgets = no
                            layoutpolicy_horizontal = expanding
                            
                            datamodel = "[GetPlayer.MakeScope.GetList('newsfeed_older_message_containers')]"
    
                            item = {
                                newsfeed_item = {}
                            }
                        }
                    }
                }
            }
        }
        
        vbox = {
            layoutpolicy_vertical = expanding
            layoutpolicy_horizontal = expanding

            visible = "[IsDataModelEmpty(GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers'))]"

            expand = {}

            text_single = {
                text = newsfeed_empty_text
                default_format = "#weak"
                align = center
            }

            expand = {}
        }

        button_icon = {
            name = "button_settings"

            parentanchor = bottom|right
            position = { -10 -5 }
            size = { 40 40 }
            texture = "gfx/interface/icons/flat_icons/menu.dds"
            onclick = "[GetVariableSystem.Toggle('newsfeed_settings_shown')]"

            alpha = 0.5

            state = {
                name = open_settings
                trigger_when = "[GetVariableSystem.Exists('newsfeed_settings_shown')]"
                on_start = "[ExecuteConsoleCommand('gui.CreateWidget gui/newsfeed_settings.gui newsfeed_settings_window')]"
            }

            state = {
                name = close_settings
                trigger_when = "[Not(GetVariableSystem.Exists('newsfeed_settings_shown'))]"
                on_start = "[ExecuteConsoleCommand('gui.ClearWidgets newsfeed_settings_window')]"
            }

            state = {
                name = hover_enter
                alpha = 1
                duration = 0.05
                using = Animation_Curve_Default
            }

            state = {
                name = hover_leave
                alpha = 0.2
                duration = 0.2
                using = Animation_Curve_Default
            }
        }

        button = {
            name = "newsfeed_clear_hotkey"
            size = { 0 0 }
            shortcut = "army_split_half"
            onclick = "[GetScriptedGui('newsfeed_delete_all_messages_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
        }
    }
    type newsfeed_item = flowcontainer {
        margin_right = 20

        flowcontainer = {
            margin_bottom = 20
            direction = vertical
            allow_outside = yes

            flowcontainer = {
                allow_outside = yes

                widget = {
                    size = { 24 20 }
                
                    state = {
                        name = _mouse_hierarchy_enter
                        on_start = "[PdxGuiWidget.FindChild('newsfeed_type').TriggerAnimation('hover_enter')]"
                        on_start = "[PdxGuiWidget.FindChild('newsfeed_dismiss').TriggerAnimation('hover_enter')]"
                    }
            
                    state = {
                        name = _mouse_hierarchy_leave
                        on_start = "[PdxGuiWidget.FindChild('newsfeed_type').TriggerAnimation('hover_leave')]"
                        on_start = "[PdxGuiWidget.FindChild('newsfeed_dismiss').TriggerAnimation('hover_leave')]"
                    }

                    newsfeed_type_icon = {
                        name = "newsfeed_type"

                        state = {
                            name = hover_enter
                            alpha = 0
                            duration = 0.2
                            using = Animation_Curve_Default
                        }
            
                        state = {
                            name = hover_leave
                            alpha = 1
                            duration = 0.2
                            using = Animation_Curve_Default
                        }
                    }
        
                    button_clear = {
                        name = "newsfeed_dismiss"
                        size = { 20 20 }

                        alpha = 0

                        onclick = "[GetScriptedGui('newsfeed_delete_message_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'newsfeed_message_index', MakeScopeValue(Scope.GetVariable('newsfeed_message_index').GetValue) ).End )]"
                        onrightclick = "[GetScriptedGui('newsfeed_delete_all_messages_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                        button_ignore = none

                        state = {
                            name = hover_enter
                            alpha = 1
                            duration = 0.2
                            using = Animation_Curve_Default
                        }
            
                        state = {
                            name = hover_leave
                            alpha = 0
                            duration = 0.2
                            using = Animation_Curve_Default
                        }

                        tooltip = MESSAGE_CLEAR_ALL_TOOLTIP

                        tooltipwidget = {
                            using = TooltipWithFakeShortcut
                            blockoverride "shortcut_text" {
                                text = F
                                default_format = "#bold"
                            }
                        }
                    }
                }

                text_single = {
                    text = "[Scope.GetVariable('newsfeed_message_title').GetFlagName]"
                    default_format = "#high"
                    fontsize = 14
                    align = left|nobaseline
                }

                text_single = {
                    text = "[Scope.GetVariable('newsfeed_message_date').GetFlagName]"
                    default_format = "#weak"
                    fontsize = 14
                    align = left|nobaseline
                    margin_left = 8
                }
            }

            flowcontainer = {
                margin_right = 10
                ignoreinvisible = yes

                # Two icons
                newsfeed_message_desc = {
                    visible = "[And(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid, Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid)]"
                    minimumsize = { 430 0 }
                    max_width = 430
                }
    
                # One icon
                newsfeed_message_desc = {
                    visible = "[And(Or(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid, Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid), Not(And(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid, Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid)))]"
                    minimumsize = { 490 0 }
                    max_width = 490
                }
    
                # No icons
                newsfeed_message_desc = {
                    visible = "[Not(Or(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid, Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid))]"
                    minimumsize = { 550 0 }
                    max_width = 550
                }
            }
        }

        flowcontainer = {
            direction = horizontal
            ignoreinvisible = yes

            newsfeed_portrait = {
                name = "portrait_left"
                visible = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid]"
                datacontext = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter]"
            }

            newsfeed_portrait = {
                name = "portrait_right"
                visible = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid]"
                datacontext = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter]"
            }
        }
    }

    type newsfeed_portrait = widget {
        size = { 60 60 }

        background = {
            using = Background_Area_Solid

            modify_texture = {
                texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
                blend_mode = alphamultiply
                alpha = 0.2
            }
        }

        background = {
            block "empty_character" {}
            texture = "gfx/portraits/portrait_frame.dds"
            using = Color_Grey
            margin = { -4 -4 }
            alpha = 0.4
        }

        widget = {
            size = { 100% 100% }
            using = Portrait_Background_Glows

            block "empty_character" {}
        }

        portrait_button = {
            parentanchor = bottom|hcenter
            size = { 60 60 }
            using = portrait_base
            portrait_texture = "[Character.GetPortrait('environment_head', 'camera_head', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
            mask = "gfx/portraits/portrait_mask_head.dds"
            effectname = "NoHighlight"
        }

        widget = {
            size = { 100% 100% }

            background = {
                texture = "gfx/portraits/portrait_rank.dds"
                margin = { -4 -4 }
                framesize = { 95 94 }
                frame = "[Character.GetPrimaryTitle.GetTierFrame]"
            }
        }

        block "coa" {
            coa_realm_tiny = {
                visible = "[Character.HasLandedTitles]"
                parentanchor = bottom|left
                position = { -4 4 }
                scale = 0.85
            }
        }

        widget = {
            size = { 100% 100% }
            block "empty_character" {}

            background = {
                texture = "gfx/portraits/portrait_frame.dds"
                using = Color_Grey
                margin = { -4 -4 }
                alpha = 0.4

                modify_texture = {
                    texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
                    blend_mode = alphamultiply
                }
            }

            background = {
                visible = "[Character.IsHovered]"
                texture = "gfx/portraits/portrait_frame.dds"
                using = Color_Grey
                alpha = 0.7
                margin = { -4 -4 }
            }
        }


        # Portrait unknown glow
        highlight_icon = {
            name = "portrait_unknown_head_small_glow"
            parentanchor = center
            position = { 3 -9 }
            gfxtype = framedbuttongfx
            effectname = "NoHighlight"
            texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
            size = { 80 100 }
            framesize = { 384 480 }
            upframe = 1
            overframe = 2
            block "glow_visible" {

                visible = "[Not(Character.IsValid)]"
            }

            block "glow_flip" {}

            block "onclick" {}
        }
    }

    type newsfeed_message_desc = text_multi {
        block "width" {}
        autoresize = yes
        layoutpolicy_horizontal = expanding
        text = "[Scope.GetVariable('newsfeed_message_desc').GetFlagName]"
        fontsize = 14
        align = left|nobaseline
    }
}