types NewsFeed {
    type newsfeed_window = window {
        name = "message_feed_widget"
        visible = "[And(And(And( Not(SinglePlayerShowingPausedSuccession), IsDefaultGUIMode), Not(IsPauseMenuShown)), Not(IsRightWindowOpen))]"
        parentanchor = bottom|right
        movable = "[Not(GetVariableSystem.Exists('newsfeed_window_locked'))]"
        resizable = "[Not(GetVariableSystem.Exists('newsfeed_window_locked'))]"
        size = { 600 400 }
        position = { 0 -70 }
        minimumsize = { 600 0 }
        maximumsize = { 600 9999 }
        allow_outside = yes
        alwaystransparent = "[GetVariableSystem.Exists('newsfeed_window_locked')]"

        state = {
            name = newsfeed_initialize
            trigger_when = "[GetScriptedGui('newsfeed_ensure_settings_initialized_gui').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
            on_start = "[GetScriptedGui('newsfeed_ensure_settings_initialized_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
        }

        vbox = {
            background = {
                visible = "[Not(GetVariableSystem.Exists('newsfeed_window_locked'))]"
                using = NewsFeed_Border_Background
            }

            visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers')))]"
            alwaystransparent = "[GetVariableSystem.Exists('newsfeed_window_locked')]"

            layoutpolicy_vertical = expanding
            layoutpolicy_horizontal = expanding

            scrollarea = {
                size = "[PdxGetWidgetScreenSize(PdxGuiWidget.AccessParent.AccessParent.Self)]"
                alwaystransparent = "[GetVariableSystem.Exists('newsfeed_window_locked')]"

                scrollbarpolicy_horizontal = always_off

                scrollbar_vertical = {
                    using = Scrollbar_Vertical
                }
                
        		scrollwidget = {
                    flowcontainer = {
                        alwaystransparent = yes

                        background = {
                            visible = "[GetVariableSystem.Exists('newsfeed_window_locked')]"
                            using = NewsFeed_Border_Background
                        }

                        margin_top = 20
                        margin_left = 20
                        direction = vertical
                        layoutpolicy_horizontal = expanding
                        flowcontainer = {
                            direction = vertical
                            allow_outside = yes
                            layoutpolicy_horizontal = expanding
                            
                            datamodel = "[GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers')]"
    
                            item = {
                                newsfeed_item = {}
                            }
                        }

                        fixedgridbox = {
                            allow_outside = yes
                            maxhorizontalslots = 1
                            maxverticalslots = 1000
                            addrow = 85
                            addcolumn = 1
                            datamodel_reuse_widgets = no
                            layoutpolicy_horizontal = expanding
                            
                            datamodel = "[GetPlayer.MakeScope.GetList('newsfeed_older_message_containers')]"
    
                            item = {
                                newsfeed_item = {}
                            }
                        }
                    }
                }
            }

            expand = {}
        }
        
        vbox = {
            layoutpolicy_vertical = expanding
            layoutpolicy_horizontal = expanding

            visible = "[And(IsDataModelEmpty(GetPlayer.MakeScope.GetList('newsfeed_recent_message_containers')), Not(GetVariableSystem.Exists('newsfeed_window_locked')))]"

            expand = {}

            text_single = {
                text = newsfeed_empty_text
                align = center
            }

            background = {
                using = NewsFeed_Border_Background
            }

            expand = {}
        }

        newsfeed_toolbar = {}

        button = {
            name = "newsfeed_clear_hotkey"
            size = { 0 0 }
            shortcut = "army_split_half"
            onclick = "[GetScriptedGui('newsfeed_delete_all_messages_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
        }
    }

    type newsfeed_toolbar = window {
        position = { 0 -55 }

        background = {
            using = Background_Area_Dark
			color = { 0.15 0.15 0.15 0.75 }
        }

        movable = yes

        flowcontainer = {
			margin_left = 10
			margin_bottom = 10
			margin_top = 10
			margin_right = 10

            resizeparent = yes
            ignoreinvisible = yes

            newsfeed_drag_icon = {
                visible = "[Not(GetVariableSystem.Toggle('newsfeed_window_locked'))]"
            }

            newsfeed_toolbar_icon = {
                down = "[GetVariableSystem.Exists('newsfeed_settings_shown')]"

                blockoverride "icon" {
                    texture = "gfx/interface/icons/flat_icons/menu.dds"
                    down = "[GetVariableSystem.Exists('newsfeed_settings_shown')]"
                }

                tooltip = newsfeed_open_settings_tooltip
                onclick = "[GetVariableSystem.Toggle('newsfeed_settings_shown')]"

                state = {
                    name = open_settings
                    trigger_when = "[GetVariableSystem.Exists('newsfeed_settings_shown')]"
                    on_start = "[ExecuteConsoleCommand('gui.CreateWidget gui/newsfeed_settings.gui newsfeed_settings_window')]"
                }

                state = {
                    name = close_settings
                    trigger_when = "[Not(GetVariableSystem.Exists('newsfeed_settings_shown'))]"
                    on_start = "[ExecuteConsoleCommand('gui.ClearWidgets newsfeed_settings_window')]"
                }
            }

            newsfeed_toolbar_icon = {
                blockoverride "icon" {
                    texture = "gfx/coat_of_arms/colored_emblems/ce_letter_a.dds"
                }
                tooltip = newsfeed_change_font_size_tooltip
                onclick = "[GetVariableSystem.Set('newsfeed_font_size', Select_CString(EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large'), 'small', 'large'))]"
            }

            newsfeed_toolbar_icon = {
                down = "[Not(GetVariableSystem.Exists('newsfeed_disable_portraits'))]"

                blockoverride "icon" {
                    texture = "gfx/interface/icons/icon_group_of_characters.dds"
                    size = { 20 20 }
                    down = "[Not(GetVariableSystem.Exists('newsfeed_disable_portraits'))]"
                }
                tooltip = newsfeed_show_portraits_tooltip
                onclick = "[GetVariableSystem.Toggle('newsfeed_disable_portraits')]"
            }

            newsfeed_toolbar_icon = {
                down = "[GetVariableSystem.Exists('newsfeed_window_locked')]"

                blockoverride "icon" {
                    texture = "gfx/tools/padlock_checkbutton.dds"
                    framesize = { 16 16 }
                    down = "[GetVariableSystem.Exists('newsfeed_window_locked')]"
                }

                tooltip = newsfeed_lock_window_tooltip
                onclick = "[GetVariableSystem.Toggle('newsfeed_window_locked')]"
            }
        }
    }

    type newsfeed_toolbar_icon = button_round {
        size = { 32 32 }
        using = tooltip_ne

        button = {
            alwaystransparent = yes
            parentanchor = center

            size = { 24 24 }

            gfxtype = togglepushbuttongfx
            effectname = "NoHighlight"

            upframe = 1
            uphoverframe = 2
            uppressedframe = 2
            downframe = 2
            downhoverframe = 2
            downpressedframe = 2

            block "icon" {}

            modify_texture = {
                texture = "gfx/interface/colors/black.dds"
                blend_mode = multiply
                spritetype = corneredtiled
            }
        
            modify_texture = {
                texture = "gfx/interface/colors/colors_textured.dds"
                blend_mode = add
                framesize = { 96 96 }
                spritetype = corneredtiled
            }
        }
    }

    type newsfeed_item = flowcontainer {
        margin_right = 20
        
        button = {
            visible = "[GetVariableSystem.Exists('newsfeed_window_locked')]"
            size = { 100% 100% }
        }

        flowcontainer = {
            margin_bottom = 20
            direction = vertical
            allow_outside = yes

            flowcontainer = {
                allow_outside = yes
                ignoreinvisible = yes

                newsfeed_icon_area = {}
                newsfeed_title_area = {}
            }

            newsfeed_description_area = {}
        }

        newsfeed_portraits = {
            visible = "[Not(GetVariableSystem.Exists('newsfeed_disable_portraits'))]"
        }
    }

    type newsfeed_dismiss_button = button_clear {
        size = { 20 20 }

        onclick = "[GetScriptedGui('newsfeed_delete_message_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'newsfeed_message_index', MakeScopeValue(Scope.GetVariable('newsfeed_message_index').GetValue) ).End )]"
        onrightclick = "[GetScriptedGui('newsfeed_delete_all_messages_gui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
        button_ignore = none

        tooltip = MESSAGE_CLEAR_ALL_TOOLTIP

        tooltipwidget = {
            using = TooltipWithFakeShortcut
            blockoverride "shortcut_text" {
                text = F
                default_format = "#bold"
            }
        }
    }

    type newsfeed_icon_area = widget {
        size = { 24 20 }
    
        state = {
            name = _mouse_hierarchy_enter
            on_start = "[PdxGuiWidget.FindChild('newsfeed_type').TriggerAnimation('fade_out')]"
            on_start = "[PdxGuiWidget.FindChild('newsfeed_dismiss').TriggerAnimation('fade_in')]"
        }

        state = {
            name = _mouse_hierarchy_leave
            on_start = "[PdxGuiWidget.FindChild('newsfeed_type').TriggerAnimation('fade_in')]"
            on_start = "[PdxGuiWidget.FindChild('newsfeed_dismiss').TriggerAnimation('fade_out')]"
        }

        newsfeed_type_icon = {
            name = "newsfeed_type"
            using = NewsFeed_Fade_States
        }

        newsfeed_dismiss_button = {
            name = "newsfeed_dismiss"
            alpha = 0
            using = NewsFeed_Fade_States
        }
    }

    type newsfeed_title_area = flowcontainer {
        ignoreinvisible = yes

        text_single = {
            visible = "[Not(EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large'))]"
            text = "[Scope.GetVariable('newsfeed_message_title').GetFlagName]"
            default_format = "#high"
            fontsize = 14
            align = left|nobaseline
        }

        text_single = {
            visible = "[EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large')]"
            text = "[Scope.GetVariable('newsfeed_message_title').GetFlagName]"
            default_format = "#high"
            margin_top = -6
            fontsize = 18
        }

        text_single = {
            text = "[Scope.GetVariable('newsfeed_message_date').GetFlagName]"
            default_format = "#weak"
            fontsize = 14
            align = left|nobaseline
            margin_left = 8
        }
    }

    type newsfeed_description_area = flowcontainer {
        margin_right = 10
        ignoreinvisible = yes

        flowcontainer = {
            visible = "[GetVariableSystem.Exists('newsfeed_disable_portraits')]"

            newsfeed_message_desc = {
                minimumsize = { 550 0 }
                blockoverride "width" {
                    max_width = 550
                }
            }
        }

        flowcontainer = {
            visible = "[Not(GetVariableSystem.Exists('newsfeed_disable_portraits'))]"

            flowcontainer = {
                visible = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid]"
                ignoreinvisible = yes

                # Two icons
                newsfeed_message_desc = {
                    visible = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid]"
                    minimumsize = { 430 0 }
                    blockoverride "width" {
                        max_width = 430
                    }
                }
        
                # One icon
                newsfeed_message_desc = {
                    visible = "[Not(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid)]"
                    minimumsize = { 490 0 }
                    blockoverride "width" {
                        max_width = 490
                    }
                }
            }

            flowcontainer = {
                visible = "[Not(Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid)]"
                ignoreinvisible = yes

                # One icon
                newsfeed_message_desc = {
                    visible = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid]"
                    minimumsize = { 490 0 }
                    blockoverride "width" {
                        max_width = 490
                    }
                }
        
                # No icons
                newsfeed_message_desc = {
                    visible = "[Not(Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid)]"
                    minimumsize = { 550 0 }
                    blockoverride "width" {
                        max_width = 550
                    }
                }
            }
        }
    }

    type newsfeed_portraits = flowcontainer {
        direction = horizontal
        ignoreinvisible = yes

        newsfeed_portrait = {
            name = "portrait_left"
            visible = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter.IsValid]"
            datacontext = "[Scope.GetVariable('newsfeed_message_left_character').GetCharacter]"
        }

        newsfeed_portrait = {
            name = "portrait_right"
            visible = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter.IsValid]"
            datacontext = "[Scope.GetVariable('newsfeed_message_right_character').GetCharacter]"
        }
    }

    type newsfeed_portrait = widget {
        size = { 60 60 }

        background = {
            using = Background_Area_Solid

            modify_texture = {
                texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
                blend_mode = alphamultiply
                alpha = 0.2
            }
        }

        background = {
            texture = "gfx/portraits/portrait_frame.dds"
            using = Color_Grey
            margin = { -4 -4 }
            alpha = 0.4
        }

        widget = {
            size = { 100% 100% }
            using = Portrait_Background_Glows
        }

        portrait_button = {
            parentanchor = bottom|hcenter
            size = { 60 60 }
            using = portrait_base
            portrait_texture = "[Character.GetCachedPortrait('environment_head', 'camera_head', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
            mask = "gfx/portraits/portrait_mask_head.dds"
            effectname = "NoHighlight"
        }

        widget = {
            size = { 100% 100% }

            background = {
                texture = "gfx/portraits/portrait_rank.dds"
                margin = { -4 -4 }
                framesize = { 95 94 }
                frame = "[Character.GetPrimaryTitle.GetTierFrame]"
            }
        }

        block "coa" {
            coa_realm_tiny = {
                visible = "[Character.HasLandedTitles]"
                parentanchor = bottom|left
                position = { -4 4 }
                scale = 0.85
            }
        }

        widget = {
            size = { 100% 100% }

            background = {
                texture = "gfx/portraits/portrait_frame.dds"
                using = Color_Grey
                margin = { -4 -4 }
                alpha = 0.4

                modify_texture = {
                    texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
                    blend_mode = alphamultiply
                }
            }

            background = {
                visible = "[Character.IsHovered]"
                texture = "gfx/portraits/portrait_frame.dds"
                using = Color_Grey
                alpha = 0.7
                margin = { -4 -4 }
            }
        }


        # Portrait unknown glow
        highlight_icon = {
            name = "portrait_unknown_head_small_glow"
            parentanchor = center
            position = { 3 -9 }
            gfxtype = framedbuttongfx
            effectname = "NoHighlight"
            texture = "gfx/portraits/unknown_portraits/button_unknown_head.dds"
            size = { 80 100 }
            framesize = { 384 480 }
            upframe = 1
            overframe = 2
            visible = "[Not(Character.IsValid)]"
        }
    }

    type newsfeed_message_desc = flowcontainer {
        ignoreinvisible = yes

        newsfeed_message_desc_impl = {
            visible = "[Not(EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large'))]"
            block "width" {}
            fontsize = 14
        }
        newsfeed_message_desc_impl = {
            visible = "[EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large')]"
            block "width" {}
            fontsize = 16
        }
    }

    type newsfeed_message_desc_impl = text_multi {
        visible = "[EqualTo_string(GetVariableSystem.Get('newsfeed_font_size'), 'large')]"
        block "width" {}
        autoresize = yes
        layoutpolicy_horizontal = expanding
        text = "[Scope.GetVariable('newsfeed_message_desc').GetFlagName]"
        fontsize = 16
        align = left|nobaseline
    }

    type newsfeed_drag_icon = widget {
        size = { 32 32 }

        line = {
            from = { 5 10 }
            to = { 25 10 }
            using = NewsFeed_Drag_Line
        }
        line = {
            from = { 5 14 }
            to = { 25 14 }
            using = NewsFeed_Drag_Line
        }
        line = {
            from = { 5 18 }
            to = { 25 18 }
            using = NewsFeed_Drag_Line
        }
        line = {
            from = { 5 22 }
            to = { 25 22 }
            using = NewsFeed_Drag_Line
        }

        tooltip = newsfeed_drag_icons_tooltip
        using = tooltip_ne
    }
}

template NewsFeed_Border_Background {
    using = Background_Area_Border_Solid
    alpha = 0.75
}

template NewsFeed_Drag_Line {
    width = 2

    color = { 1 1 1 0.7 }

    texture = "gfx/lines/line_mask.dds"
    uv_scale = { 1.0 1.0 }

    mask = "gfx/lines/mask.dds"
    mask_uv_scale = { 0.1 1.0 }
}

template NewsFeed_Fade_States {
    state = {
        name = fade_out
        alpha = 0
        duration = 0.2
        using = Animation_Curve_Default
    }

    state = {
        name = fade_in
        alpha = 1
        duration = 0.2
        using = Animation_Curve_Default
    }
}